// Code generated by go-swagger; DO NOT EDIT.

package alertmanager

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new alertmanager API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for alertmanager API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	RouteCreateSilence(params *RouteCreateSilenceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RouteCreateSilenceCreated, error)

	RouteDeleteAlertingConfig(params *RouteDeleteAlertingConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RouteDeleteAlertingConfigOK, error)

	RouteDeleteSilence(params *RouteDeleteSilenceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RouteDeleteSilenceOK, error)

	RouteGetAMAlertGroups(params *RouteGetAMAlertGroupsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RouteGetAMAlertGroupsOK, error)

	RouteGetAMAlerts(params *RouteGetAMAlertsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RouteGetAMAlertsOK, error)

	RouteGetAMStatus(params *RouteGetAMStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RouteGetAMStatusOK, error)

	RouteGetAlertingConfig(params *RouteGetAlertingConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RouteGetAlertingConfigOK, error)

	RouteGetSilence(params *RouteGetSilenceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RouteGetSilenceOK, error)

	RouteGetSilences(params *RouteGetSilencesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RouteGetSilencesOK, error)

	RoutePostAMAlerts(params *RoutePostAMAlertsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RoutePostAMAlertsOK, error)

	RoutePostAlertingConfig(params *RoutePostAlertingConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RoutePostAlertingConfigCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  RouteCreateSilence create silence
*/
func (a *Client) RouteCreateSilence(params *RouteCreateSilenceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RouteCreateSilenceCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRouteCreateSilenceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RouteCreateSilence",
		Method:             "POST",
		PathPattern:        "/api/alertmanager/{Recipient}/api/v2/silences",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RouteCreateSilenceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RouteCreateSilenceCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RouteCreateSilence: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RouteDeleteAlertingConfig deletes the Alerting config for a tenant
*/
func (a *Client) RouteDeleteAlertingConfig(params *RouteDeleteAlertingConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RouteDeleteAlertingConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRouteDeleteAlertingConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RouteDeleteAlertingConfig",
		Method:             "DELETE",
		PathPattern:        "/api/alertmanager/{Recipient}/config/api/v1/alerts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RouteDeleteAlertingConfigReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RouteDeleteAlertingConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RouteDeleteAlertingConfig: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RouteDeleteSilence delete silence
*/
func (a *Client) RouteDeleteSilence(params *RouteDeleteSilenceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RouteDeleteSilenceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRouteDeleteSilenceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RouteDeleteSilence",
		Method:             "DELETE",
		PathPattern:        "/api/alertmanager/{Recipient}/api/v2/silence/{SilenceId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RouteDeleteSilenceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RouteDeleteSilenceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RouteDeleteSilence: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RouteGetAMAlertGroups get alertmanager alerts
*/
func (a *Client) RouteGetAMAlertGroups(params *RouteGetAMAlertGroupsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RouteGetAMAlertGroupsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRouteGetAMAlertGroupsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RouteGetAMAlertGroups",
		Method:             "GET",
		PathPattern:        "/api/alertmanager/{Recipient}/api/v2/alerts/groups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RouteGetAMAlertGroupsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RouteGetAMAlertGroupsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RouteGetAMAlertGroups: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RouteGetAMAlerts get alertmanager alerts
*/
func (a *Client) RouteGetAMAlerts(params *RouteGetAMAlertsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RouteGetAMAlertsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRouteGetAMAlertsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RouteGetAMAlerts",
		Method:             "GET",
		PathPattern:        "/api/alertmanager/{Recipient}/api/v2/alerts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RouteGetAMAlertsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RouteGetAMAlertsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RouteGetAMAlerts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RouteGetAMStatus get alertmanager status and configuration
*/
func (a *Client) RouteGetAMStatus(params *RouteGetAMStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RouteGetAMStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRouteGetAMStatusParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RouteGetAMStatus",
		Method:             "GET",
		PathPattern:        "/api/alertmanager/{Recipient}/api/v2/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RouteGetAMStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RouteGetAMStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RouteGetAMStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RouteGetAlertingConfig gets an Alerting config
*/
func (a *Client) RouteGetAlertingConfig(params *RouteGetAlertingConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RouteGetAlertingConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRouteGetAlertingConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RouteGetAlertingConfig",
		Method:             "GET",
		PathPattern:        "/api/alertmanager/{Recipient}/config/api/v1/alerts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RouteGetAlertingConfigReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RouteGetAlertingConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RouteGetAlertingConfig: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RouteGetSilence get silence
*/
func (a *Client) RouteGetSilence(params *RouteGetSilenceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RouteGetSilenceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRouteGetSilenceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RouteGetSilence",
		Method:             "GET",
		PathPattern:        "/api/alertmanager/{Recipient}/api/v2/silence/{SilenceId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RouteGetSilenceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RouteGetSilenceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RouteGetSilence: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RouteGetSilences get silences
*/
func (a *Client) RouteGetSilences(params *RouteGetSilencesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RouteGetSilencesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRouteGetSilencesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RouteGetSilences",
		Method:             "GET",
		PathPattern:        "/api/alertmanager/{Recipient}/api/v2/silences",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RouteGetSilencesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RouteGetSilencesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RouteGetSilences: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RoutePostAMAlerts create alertmanager alerts
*/
func (a *Client) RoutePostAMAlerts(params *RoutePostAMAlertsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RoutePostAMAlertsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRoutePostAMAlertsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RoutePostAMAlerts",
		Method:             "POST",
		PathPattern:        "/api/alertmanager/{Recipient}/api/v2/alerts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RoutePostAMAlertsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RoutePostAMAlertsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RoutePostAMAlerts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RoutePostAlertingConfig sets an Alerting config
*/
func (a *Client) RoutePostAlertingConfig(params *RoutePostAlertingConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RoutePostAlertingConfigCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRoutePostAlertingConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RoutePostAlertingConfig",
		Method:             "POST",
		PathPattern:        "/api/alertmanager/{Recipient}/config/api/v1/alerts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RoutePostAlertingConfigReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RoutePostAlertingConfigCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RoutePostAlertingConfig: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
