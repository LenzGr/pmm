// Code generated by go-swagger; DO NOT EDIT.

package configuration

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new configuration API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for configuration API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	RouteDeleteNGalertConfig(params *RouteDeleteNGalertConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RouteDeleteNGalertConfigOK, error)

	RouteGetAlertmanagers(params *RouteGetAlertmanagersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RouteGetAlertmanagersOK, error)

	RouteGetNGalertConfig(params *RouteGetNGalertConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RouteGetNGalertConfigOK, error)

	RoutePostNGalertConfig(params *RoutePostNGalertConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RoutePostNGalertConfigCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  RouteDeleteNGalertConfig deletes the n galert configuration of the user s organization
*/
func (a *Client) RouteDeleteNGalertConfig(params *RouteDeleteNGalertConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RouteDeleteNGalertConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRouteDeleteNGalertConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RouteDeleteNGalertConfig",
		Method:             "DELETE",
		PathPattern:        "/api/v1/ngalert/admin_config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RouteDeleteNGalertConfigReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RouteDeleteNGalertConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RouteDeleteNGalertConfig: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RouteGetAlertmanagers gets the discovered and dropped alertmanagers of the user s organization based on the specified configuration
*/
func (a *Client) RouteGetAlertmanagers(params *RouteGetAlertmanagersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RouteGetAlertmanagersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRouteGetAlertmanagersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RouteGetAlertmanagers",
		Method:             "GET",
		PathPattern:        "/api/v1/ngalert/alertmanagers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RouteGetAlertmanagersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RouteGetAlertmanagersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RouteGetAlertmanagers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RouteGetNGalertConfig gets the n galert configuration of the user s organization returns 404 if no configuration is present
*/
func (a *Client) RouteGetNGalertConfig(params *RouteGetNGalertConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RouteGetNGalertConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRouteGetNGalertConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RouteGetNGalertConfig",
		Method:             "GET",
		PathPattern:        "/api/v1/ngalert/admin_config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RouteGetNGalertConfigReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RouteGetNGalertConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RouteGetNGalertConfig: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RoutePostNGalertConfig creates or updates the n galert configuration of the user s organization
*/
func (a *Client) RoutePostNGalertConfig(params *RoutePostNGalertConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RoutePostNGalertConfigCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRoutePostNGalertConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RoutePostNGalertConfig",
		Method:             "POST",
		PathPattern:        "/api/v1/ngalert/admin_config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RoutePostNGalertConfigReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RoutePostNGalertConfigCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RoutePostNGalertConfig: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
