// Code generated by go-swagger; DO NOT EDIT.

package ruler

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new ruler API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for ruler API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	RouteDeleteNamespaceRulesConfig(params *RouteDeleteNamespaceRulesConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RouteDeleteNamespaceRulesConfigAccepted, error)

	RouteDeleteRuleGroupConfig(params *RouteDeleteRuleGroupConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RouteDeleteRuleGroupConfigAccepted, error)

	RouteGetNamespaceRulesConfig(params *RouteGetNamespaceRulesConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RouteGetNamespaceRulesConfigAccepted, error)

	RouteGetRulegGroupConfig(params *RouteGetRulegGroupConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RouteGetRulegGroupConfigAccepted, error)

	RouteGetRulesConfig(params *RouteGetRulesConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RouteGetRulesConfigAccepted, error)

	RoutePostNameRulesConfig(params *RoutePostNameRulesConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RoutePostNameRulesConfigAccepted, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  RouteDeleteNamespaceRulesConfig Delete namespace
*/
func (a *Client) RouteDeleteNamespaceRulesConfig(params *RouteDeleteNamespaceRulesConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RouteDeleteNamespaceRulesConfigAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRouteDeleteNamespaceRulesConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RouteDeleteNamespaceRulesConfig",
		Method:             "DELETE",
		PathPattern:        "/api/ruler/{Recipient}/api/v1/rules/{Namespace}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RouteDeleteNamespaceRulesConfigReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RouteDeleteNamespaceRulesConfigAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RouteDeleteNamespaceRulesConfig: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RouteDeleteRuleGroupConfig Delete rule group
*/
func (a *Client) RouteDeleteRuleGroupConfig(params *RouteDeleteRuleGroupConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RouteDeleteRuleGroupConfigAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRouteDeleteRuleGroupConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RouteDeleteRuleGroupConfig",
		Method:             "DELETE",
		PathPattern:        "/api/ruler/{Recipient}/api/v1/rules/{Namespace}/{Groupname}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RouteDeleteRuleGroupConfigReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RouteDeleteRuleGroupConfigAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RouteDeleteRuleGroupConfig: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RouteGetNamespaceRulesConfig Get rule groups by namespace
*/
func (a *Client) RouteGetNamespaceRulesConfig(params *RouteGetNamespaceRulesConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RouteGetNamespaceRulesConfigAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRouteGetNamespaceRulesConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RouteGetNamespaceRulesConfig",
		Method:             "GET",
		PathPattern:        "/api/ruler/{Recipient}/api/v1/rules/{Namespace}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RouteGetNamespaceRulesConfigReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RouteGetNamespaceRulesConfigAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RouteGetNamespaceRulesConfig: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RouteGetRulegGroupConfig Get rule group
*/
func (a *Client) RouteGetRulegGroupConfig(params *RouteGetRulegGroupConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RouteGetRulegGroupConfigAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRouteGetRulegGroupConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RouteGetRulegGroupConfig",
		Method:             "GET",
		PathPattern:        "/api/ruler/{Recipient}/api/v1/rules/{Namespace}/{Groupname}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RouteGetRulegGroupConfigReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RouteGetRulegGroupConfigAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RouteGetRulegGroupConfig: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RouteGetRulesConfig List rule groups
*/
func (a *Client) RouteGetRulesConfig(params *RouteGetRulesConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RouteGetRulesConfigAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRouteGetRulesConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RouteGetRulesConfig",
		Method:             "GET",
		PathPattern:        "/api/ruler/{Recipient}/api/v1/rules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RouteGetRulesConfigReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RouteGetRulesConfigAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RouteGetRulesConfig: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RoutePostNameRulesConfig Creates or updates a rule group
*/
func (a *Client) RoutePostNameRulesConfig(params *RoutePostNameRulesConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RoutePostNameRulesConfigAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRoutePostNameRulesConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RoutePostNameRulesConfig",
		Method:             "POST",
		PathPattern:        "/api/ruler/{Recipient}/api/v1/rules/{Namespace}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/yaml"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RoutePostNameRulesConfigReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RoutePostNameRulesConfigAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RoutePostNameRulesConfig: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
